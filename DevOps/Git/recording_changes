As a powerful version control system, Git allows developers to manage changes to their code and collaborate effectively. This article explores the fundamental Git concepts and commands related to management of changes in a Git repository, including different file stages and areas, commits, file management, `.gitignore`, and other.

## Git

Git is a mature, actively maintained open-source project originally developed in 2005 by Linus Torvalds. It is by far the most widely used version control system. 

Git is a distributed version control system that stores a full project history, including all its versions, in a project repository. 

- Each version is recorded as a commit, which is essentially a snapshot of the entire project at a specific moment in time. 
- A Git repository represents the history of all the changes made to the project as a series of commits, or snapshots. 
- Git provides the flexibility to decide which changes will be recorded in the next version of the project and which will not, and it also allows reverting the project to any of its previously recorded states.

Given this, the version control process in Git classifies directories and files within the repository into different categories. Before a modified file is saved in the next snapshot of the project, it undergoes several stages in order. Understanding these changes is crucial for working with Git. 

## Tracked and Untracked Files

In Git, every file within a repository can exist in one of two distinct states: tracked or untracked.

- Tracked files

	- Tracked files are those that Git recognizes. This includes files that existed in the previous commit or files that have been staged for the next commit.

	- Tracked files fall into one of three stages: unmodified, modified, or staged.
		- Unmodified: no changes since the last commit.
		- Modified: changes have been made since the last commit, but these changes have not yet been staged or committed.
		- Staged: changes that have been added to the staged area, ready for the next commit.
	
	- In short, tracked files are essentially those that Git is aware of and is actively monitoring for changes.

- Untracked files

	- Untracked files are those that Git does not know anything about. These are the files that exist in the working directory but were neither included in the previous commit nor staged for the next commit.

>When a repository is cloned, all files are initially marked as tracked and unmodified. 
>When a Git repository is initialized on top of an existing directory, all files start as untracked and unmodified.

The `git status` command can be used to check the current status of files in a Git repository:

```bash
git status
```

For a concise view, the `-s` (`--short`) option can be used:

```bash
git status -s
```

>Later on, unless otherwise specified, the term 'files' in this article will refer specifically to tracked files, as these are the files that Git works with.
## The Three States

Each file in a Git repository can exist in one of three distinct stages:
- <span style="color:#668cff">Modified</span>
- <span style="color:#668cff">Staged</span> 
- <span style="color:#668cff">Committed</span>
#### modified

>A <span style="color:#668cff">modified</span> file is a file that has been changed in the working directory since the last commit, and these changes have not yet been staged for the next commit.

- If a file has been altered since it was last staged or committed, it is considered modified.
#### staged

>A <span style="color:#668cff">staged</span> file is one that has been modified and added to the staging area, aka index. A staged file is ready to be included in the next commit.

- Staged changes represent a snapshot of all modified files in the Git repository.

- To _stage_ means to mark a file for inclusion in the next commit. 

- Files can be added to the staging area either individually or multiple at once.

The `git add` command is used to add files to the staging area. For example, to stage a specific file, specify the filename as an argument to the command:

```bash
git add filename.txt
```

To stage all modified files in the current working directory, pass the reference to the directory as an argument:

```bash
git add .
```

>Git stages a file exactly as it exists at the time the `git add` command is executed. If further changes are made to a staged file without using `git add` again, only the changes captured before the first `git add` will be committed.

It is possible to remove a file from the staging area, or unstage it, with the `git restore --staged` command:

```bash
git restore --staged staged_file
```

- Unstaged files will not be included in the next commit; they will remain as modified files in the working directory on the disk.

To confirm which files have been staged, the `git status` command can be used:

```bash
git status
```
#### committed

>A <span style="color:#668cff">Git commit</span> is a snapshot of the entire repository at a specific point in time, including all previously staged changes made to tracked files and directories. Each commit is uniquely identified by a SHA-1 hash. 

>A <span style="color:#668cff">committed</span> file is a file that has been recorded in the local repository's history through a commit operation. 

- If a particular version of a file is in the Git directory, itâ€™s considered committed. 

- It is possible to revert changes to any of the committed versions of the project. 

- Git stores timestamps for each commit, documenting when changes were made.

- Each and every commit includes a commit message that provides context about the changes.

>Commits are snapshots, not diffs
>A commit captures the complete state of all tracked files, including their contents, permissions, and metadata, storing it as a set of objects in the Git database. Each commit is uniquely identified by its SHA-1 hash.
>Yes, this results in larger Git repository size. Because Git is optimized for performance over storage, since storage is cheap. 

- Each commit also maintains a reference to its parent commit.

>In Git, a parent commit is the immediate predecessor of a commit in the commit history. It represents the state of the repository before the changes introduced by the current commit.

Commits are made with the `git commit` command. It takes the parent of the current commit, applies the changes in the staging area to it, and saves the result as a new commit. When the commit is created, Git calculates its SHA-1 hash, and uses it as an identifier of the commit. 

```bash
git commit
```

By default, `git commit` command will launch a text editor asking to enter the commit message. But often it can be convenient to enter the commit message directly with the `-m` option, avoiding the editor:

```bash
git commit -m "commit message"
```

After the commit, Git will return information about the branch and the saved changes, including the number of committed files and statistics about lines added or removed, as well as the SHA-1 checksum of the commit.

It may often come handy to unite the `git add .` and `git commit` commands into one. The `-a` option with the `git commit` command allows to automatically stage every tracked file in the current directory, and then make a commit:

```bash
git commit -a
```
